#!/usr/bin/env bash
# setup_zsh_p10k_clean.sh
# Ubuntu 24.04 — Zsh + Powerlevel10k + autosuggestions + syntax-highlighting
# - Installs MesloLGS Nerd Fonts correctly
# - Configures GNOME Terminal to use MesloLGS NF if available
# - Clones plugins directly (no plugin manager)
# - Writes fresh ~/.zshrc and ~/.p10k.zsh
# - Changes login shell to zsh (optional) and starts zsh at the end

set -euo pipefail

### ---- Settings ----
DO_CHSH="yes"                 # "yes" -> chsh to zsh
SET_GNOME_FONT="auto"         # "auto" tries to set GNOME Terminal font if possible
FONT_SIZE="12"                # GNOME Terminal font size to apply
FONTS_DIR="$HOME/.local/share/fonts"
ZSH_HOME="$HOME/.zsh"
P10K_DIR="$ZSH_HOME/powerlevel10k"
PLUG_DIR="$ZSH_HOME/plugins"
AUTO_DIR="$PLUG_DIR/zsh-autosuggestions"
SYN_DIR="$PLUG_DIR/zsh-syntax-highlighting"
ZSHRC="$HOME/.zshrc"
P10K="$HOME/.p10k.zsh"

log()  { printf "\033[1;32m[+]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[!]\033[0m %s\n" "$*"; }

require_ubuntu() {
  if [[ -r /etc/os-release ]]; then
    . /etc/os-release
    [[ "${ID:-}" == "ubuntu" ]] || warn "Non-Ubuntu OS detected."
  fi
}

install_packages() {
  log "Installing packages…"
  sudo apt-get update -y
  sudo apt-get install -y zsh git curl wget ca-certificates fontconfig unzip
  # nice to have for icons/fallbacks:
  sudo apt-get install -y fonts-noto-color-emoji >/dev/null 2>&1 || true
}

install_fonts() {
  log "Installing MesloLGS Nerd Fonts (user) …"
  mkdir -p "$FONTS_DIR"
  declare -A files=(
    ["MesloLGS NF Regular.ttf"]="MesloLGS%20NF%20Regular.ttf"
    ["MesloLGS NF Bold.ttf"]="MesloLGS%20NF%20Bold.ttf"
    ["MesloLGS NF Italic.ttf"]="MesloLGS%20NF%20Italic.ttf"
    ["MesloLGS NF Bold Italic.ttf"]="MesloLGS%20NF%20Bold%20Italic.ttf"
  )
  for name in "${!files[@]}"; do
    url="https://github.com/romkatv/powerlevel10k-media/raw/master/${files[$name]}"
    [[ -f "$FONTS_DIR/$name" ]] || curl -fsSL "$url" -o "$FONTS_DIR/$name"
  done
  fc-cache -f "$FONTS_DIR" || true

  local cnt
  cnt="$(fc-list | grep -ci 'MesloLGS NF' || true)"
  if [[ "${cnt:-0}" -lt 4 ]]; then
    warn "MesloLGS NF not fully registered (found $cnt). Try re-opening terminal if icons look wrong."
  else
    log "MesloLGS NF registered (found $cnt faces)."
  fi
}

set_gnome_terminal_font() {
  [[ "$SET_GNOME_FONT" != "auto" ]] && return 0
  if command -v gsettings >/dev/null 2>&1; then
    # Set system monospace font (affects apps that follow it)
    if gsettings writable org.gnome.desktop.interface monospace-font-name >/dev/null 2>&1; then
      gsettings set org.gnome.desktop.interface monospace-font-name "MesloLGS NF Regular $FONT_SIZE" || true
      log "Set org.gnome.desktop.interface monospace-font-name → MesloLGS NF Regular $FONT_SIZE"
    fi
    # If GNOME Terminal is present, set the profile font too
    if gsettings list-schemas | grep -q 'org.gnome.Terminal.ProfilesList'; then
      local def uuid base
      def="$(gsettings get org.gnome.Terminal.ProfilesList default 2>/dev/null || echo '')"
      uuid="${def//\'/}"
      if [[ -n "$uuid" ]]; then
        base="org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$uuid/"
        gsettings set "$base" use-system-font false || true
        gsettings set "$base" font "MesloLGS NF Regular $FONT_SIZE" || true
        log "Set GNOME Terminal default profile font → MesloLGS NF Regular $FONT_SIZE"
      fi
    fi
  fi
}

clone_plugins() {
  log "Cloning plugins (no plugin manager)…"
  mkdir -p "$PLUG_DIR"

  if [[ -d "$P10K_DIR/.git" ]]; then git -C "$P10K_DIR" pull --ff-only || true
  else git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$P10K_DIR"; fi

  if [[ -d "$AUTO_DIR/.git" ]]; then git -C "$AUTO_DIR" pull --ff-only || true
  else git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git "$AUTO_DIR"; fi

  if [[ -d "$SYN_DIR/.git" ]]; then git -C "$SYN_DIR" pull --ff-only || true
  else git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git "$SYN_DIR"; fi
}

write_zshrc() {
  log "Writing ~/.zshrc… (backed up if existed)"
  [[ -f "$ZSHRC" ]] && cp -a "$ZSHRC" "$ZSHRC.$(date +%Y%m%d%H%M%S).bak"
  cat > "$ZSHRC" <<ZRC
# ~/.zshrc — generated by setup_zsh_p10k_clean.sh

# History & behavior
export HISTFILE="\$HOME/.zsh_history"
export HISTSIZE=200000
export SAVEHIST=200000
setopt SHARE_HISTORY HIST_IGNORE_DUPS HIST_IGNORE_ALL_DUPS HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY EXTENDED_HISTORY
setopt AUTO_CD AUTO_PUSHD PUSHD_IGNORE_DUPS

# Completion
autoload -Uz compinit; zmodload zsh/complist; compinit -u

# Prompt speed
typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

# Theme: Powerlevel10k (no oh-my-zsh needed)
source "$P10K_DIR/powerlevel10k.zsh-theme"
[[ -f "\$HOME/.p10k.zsh" ]] && source "\$HOME/.p10k.zsh"

# Plugins
source "$AUTO_DIR/zsh-autosuggestions.zsh"
# Keep syntax highlighting at the very end
source "$SYN_DIR/zsh-syntax-highlighting.zsh"

# Aliases
alias ll='ls -alF'; alias la='ls -A'; alias l='ls -CF'; alias g='git'; alias ..='cd ..'

export EDITOR=vim
ZRC
}

write_p10k() {
  log "Writing ~/.p10k.zsh… (minimal, fast defaults)"
  [[ -f "$P10K" ]] && cp -a "$P10K" "$P10K.$(date +%Y%m%d%H%M%S).bak"
  cat > "$P10K" <<'P10K'
typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)
typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time time)
typeset -g POWERLEVEL9K_TIME_FORMAT='%H:%M'
typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=3
typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
P10K
}

maybe_chsh() {
  if [[ "$DO_CHSH" == "yes" ]]; then
    local zbin; zbin="$(command -v zsh)"
    if [[ -n "$zbin" && "$(getent passwd "$USER" | cut -d: -f7)" != "$zbin" ]]; then
      log "Changing login shell to zsh…"
      chsh -s "$zbin" "$USER" || sudo chsh -s "$zbin" "$USER" || warn "chsh failed; you can run: sudo chsh -s $zbin $USER"
    fi
  fi
}

check_post() {
  log "=== Post-install checks ==="
  zsh --version || true
  echo "Fonts installed:"; fc-list | grep -i "MesloLGS NF" | sed -n '1,4p' || true
  echo "Plugins dirs:"; ls -1 "$P10K_DIR" >/dev/null 2>&1 && echo "  powerlevel10k ✓" || echo "  powerlevel10k ✗"
  [[ -d "$AUTO_DIR" ]] && echo "  zsh-autosuggestions ✓" || echo "  zsh-autosuggestions ✗"
  [[ -d "$SYN_DIR"  ]] && echo "  zsh-syntax-highlighting ✓" || echo "  zsh-syntax-highlighting ✗"
}

main() {
  require_ubuntu
  install_packages
  install_fonts
  set_gnome_terminal_font
  clone_plugins
  write_zshrc
  write_p10k
  maybe_chsh
  check_post

  echo
  log "Sourcing ~/.zshrc and launching Zsh…"
  # Source in an interactive zsh, then replace current shell with a login zsh
  zsh -i -c 'source ~/.zshrc >/dev/null 2>&1 || true'
  exec zsh -l
}

main "$@"

